buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { 
        	url "http://repo.spring.io/milestone"
        	url "https://plugins.gradle.org/m2/" 
		}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
    baseName = 'HomeCash'
    version =  '0.0.1-SNAPSHOT'
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'com.amazonaws:aws-java-sdk-dynamodb:1.10.52'
    compile 'com.github.derjust:spring-data-dynamodb:4.2.0'
    
	testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.4.1.RELEASE'
}

bootRun {
    addResources = false
    main = 'pl.com.soap.homecash.Application'
}

def env = hasProperty('env') ? getProperty('env') : "local"

task loadProps {
    def props = new Properties()
    props.load(new FileInputStream("src/main/resources/" + env + ".properties"))

    props.each { key, val ->
        project.set(key, val)
        System.setProperty(key, val)
    }
}

task startDB (type:Exec) {
    commandLine "bash", "-c", "docker run -p ${dbPort}:${dbPort} -d tray/dynamodb-local -inMemory -sharedDb -port ${dbPort}"
}
task stopDB (type:Exec) {
    commandLine "bash", "-c", "id=\$(docker ps | grep \"tray/dynamodb-local\" | awk '{print \$1}');if [[ \${id} ]]; then docker stop \$id; fi"
}

task deployDB(type:Exec) {
    dependsOn loadProps
    mustRunAfter startDB

    def dynamoDBEndpoint;
    if (amazonDynamodbEndpoint != "") {
        dynamoDBEndpoint = "--endpoint=${amazonDynamodbEndpoint}"
    } else {
        dynamoDBEndpoint = ""
    }
    environment 'AWS_ACCESS_KEY_ID', "${AWS_ACCESS_KEY}"
    environment 'AWS_SECRET_ACCESS_KEY', "${AWS_SECRET_ACCESS_KEY}"
    commandLine "bash", "-c", "for f in \$(find database -name \"*.json\"); do aws --region ${region} dynamodb create-table ${dynamoDBEndpoint} --cli-input-json \"\$(cat \$f | sed -e 's/TableName\": \"/TableName\": \"${env}/g')\"; done"
	commandLine "bash", "-c", "for f in \$(find database_data -name \"*TestData.json\"); do aws --region ${region} dynamodb batch-write-item --request-items file://\$f; done"
	
}

task restartDB (type: GradleBuild) {
    dependsOn loadProps
    tasks = ['stopDB', 'startDB', 'deployDB']
    StartParameter.getProperties().put("env", env)
}

test {
    dependsOn restartDB
    finalizedBy stopDB
    environment 'AWS_ACCESS_KEY', "${AWS_ACCESS_KEY}"
    environment 'AWS_SECRET_ACCESS_KEY', "${AWS_SECRET_ACCESS_KEY}"
    setSystemProperties(System.getProperties().asImmutable())
    testLogging {
        events "passed", "skipped", "failed"
    }
}